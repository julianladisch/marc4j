<?xml version="1.0" encoding="utf-8"?>
<project  xmlns:ivy="antlib:org.apache.ivy.ant" name="marc4j" default="jar" basedir="." 
     xmlns:if="ant:if" xmlns:unless="ant:unless">

    <target name="init">
        <tstamp />
       <!-- <record name="build.log" loglevel="verbose" append="no" /> -->
    </target>

    <property file="build.properties" />
    <property environment="env" /> 

    <tstamp>
        <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss Z" timezone="GMT" />
    </tstamp>

    <property name="marc4j.org.profileId.sonatype.org" value="33ba7afe3fa581" />

    <target name="prepare" depends="init,setup-ivy" unless="prepared">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.test-classes.dir}"/>
        <mkdir dir="${build.generated-src.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <ivy:retrieve />
        <!-- Add the downloaded ant-contrib JAR to the classpath -->
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <fileset dir="lib">
                    <include name="ant-contrib-*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <property name="prepared" value="true"/>
    </target>

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="test.classpath">
        <pathelement location="${build.classes.dir}" />
        <pathelement location="${build.test-classes.dir}" />
        <pathelement location="test/resources"/>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <target name="prepare-codetablegen" depends="prepare">
        <mkdir dir="${build.generated-src.dir}/org/marc4j/converter/impl" />
        <dependset>
            <srcfileset  dir="${src.dir}/org/marc4j/converter/impl/"/>
            <targetfileset dir="${build.generated-src.dir}/org/marc4j/converter/impl/" includes="*.java"/>
        </dependset>
        <available file="${build.generated-src.dir}/org/marc4j/converter/impl/CodeTableGenerated.java" property="already.ctged"/>
    </target>

    <target name="codetablegen" depends="prepare-codetablegen" unless="already.ctged">
        <java fork="true" classname="org.marc4j.converter.impl.CodeTableGenerator" errorproperty="CodeTableGenerated.error" output="${build.generated-src.dir}/org/marc4j/converter/impl/CodeTableGenerated.java" >
            <classpath location="${build.classes.dir}" />
            <arg value="MARC8"/>
        </java>
        <java fork="true" classname="org.marc4j.converter.impl.ReverseCodeTableGenerator" errorproperty="ReverseCodeTableGenerated.error" output="${build.generated-src.dir}/org/marc4j/converter/impl/ReverseCodeTableGenerated.java" >
            <classpath location="${build.classes.dir}" />
            <arg value="MARC8"/>
        </java>
        <java fork="true" classname="org.marc4j.converter.impl.CodeTableGenerator" errorProperty="UnimarcCodeTableGenerated.error" output="${build.generated-src.dir}/org/marc4j/converter/impl/UnimarcCodeTableGenerated.java" >
            <classpath location="${build.classes.dir}" />
            <arg value="UNIMARC"/>
        </java>
        <java fork="true" classname="org.marc4j.converter.impl.ReverseCodeTableGenerator" errorProperty="UnimarcReverseCodeTableGenerated.error" output="${build.generated-src.dir}/org/marc4j/converter/impl/UnimarcReverseCodeTableGenerated.java" >
            <classpath location="${build.classes.dir}" />
            <arg value="UNIMARC"/>
        </java>
       <!-- <concat >
            <fileset dir="${build.generated-src.dir}/org/marc4j/converter/impl" includes="Code*.java" />
            <filterchain>
                <headfilter lines="15"/>
            </filterchain>
        </concat>
        <concat >
            <fileset dir="${build.generated-src.dir}/org/marc4j/converter/impl" includes="Rev*.java" />
            <filterchain>
                <headfilter lines="15"/>
            </filterchain>
        </concat>  -->
    </target>

    <target name="compile-codegen" depends="codetablegen">
        <javac encoding="UTF-8" srcdir="${build.generated-src.dir}" destdir="${build.classes.dir}" includes="**/*Generated.java" debug="false">
            <classpath refid="classpath" />
        </javac>

    </target>
    <target name="compile-all" depends="compile-base,compile-codegen"/>

    <target name="compile-base" depends="prepare">
        <javac encoding="UTF-8" srcdir="${src.dir}" destdir="${build.classes.dir}" includes="**/*.java" excludes="**/*Generated.java" debug="true" debuglevel="source,lines,vars">
            <classpath refid="classpath" />
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.properties" />
                <include name="**/*.xml" />
                <exclude name="**/tests/*" />
                <exclude name="**/tests" />
            </fileset>
        </copy>
    </target>

    <target name="compile-tests" depends="compile-all">
        <javac encoding="UTF-8" srcdir="${test.src.dir}" destdir="${build.test-classes.dir}" includes="**/*.java" excludes="**/*Generated.java" debug="true" debuglevel="source,lines,vars">
            <classpath refid="test.classpath" />
        </javac>
    </target>

    <target name="test" depends="compile-all,compile-tests">
        <junit fork="yes" forkmode="perBatch" haltonfailure="true">
            <batchtest>
                <fileset dir="${test.src.dir}">
                    <exclude name="org/marc4j/test/utils/**"/>
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false" />
            <classpath refid="test.classpath" />
        </junit>
    </target>

    <target name="jar" depends="compile-all,version">
        <jar jarfile="${build.dir}/${jar.name}">
            <manifest>
                <attribute name="Main-Class" value="org.marc4j.util.UtilDriver"/>
                <attribute name="Version" value="${version}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
                <section name="org/marc4j">
                  <attribute name="Specification-Title" value="marc4j"/>
                  <attribute name="Specification-Version" value="${specversion}"/>
                  <attribute name="Specification-Vendor" value="org.marc4j"/>

                  <attribute name="Implementation-Title" value="marc4j"/>
                  <attribute name="Implementation-Version" value="${version}"/>
                  <attribute name="Implementation-Vendor" value="Team marc4j"/>
                </section>
            </manifest>
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class" />
                <exclude name="**/CodeTableGenerator.class" />
                <exclude name="**/ReverseCodeTableGenerator.class" />
                <exclude name="**/samples/**/*.*" />
                <exclude name="**/solrmarc/**/*.class" />
                <exclude name="**/test/**/*.*" />
                <include name="**/*.properties" />
                <exclude name="**/*.xml" />
            </fileset>
        </jar>
    </target>

    <target name="javadoc" depends="prepare" unless="javadoc.already.run" >
        <mkdir dir="${apidoc.dir}" />
        <javadoc encoding="UTF-8" charset="UTF-8" docencoding="UTF-8" destdir="${apidoc.dir}" author="true" version="true" overview="overview.html" use="true" windowtitle="MARC4J API" doctitle="MARC4J API" bottom="Copyright &#169; 2002-2006 Bas Peters. All Rights Reserved.">
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <exclude name="org/marc4j/samples" />
                <exclude name="org/marc4j/test" />
            </packageset>
            <classpath refid="classpath" />
            <link offline="true" href="http://java.sun.com/products/jdk/1.6/docs/api/" packagelistLoc="." />
        </javadoc>
        <property name="javadoc.already.run" value="true" />
    </target>

    <target name="clean" depends="init">
        <delete includeEmptyDirs="true">
            <fileset dir="${dist.dir}" includes="**/*" defaultexcludes="no"/>
        </delete>
        <delete dir="${build.dir}" />
    </target>

    <target name="distclean" depends="clean">
        <delete dir="${lib.dir}"/>
        <delete dir="${ivy.jar.dir}"/>

    </target>

    <target name="dist" depends="jar,javadoc" unless="dist.already.run" >
        <delete dir="${dist.dir}" includes="*" />
        <property name="prefix" value="${project.name}-${version}" />
        <property name="tmp.dir" value="${dist.dir}/tmp" />
        <property name="tmp.arc.dir" value="${tmp.dir}/${prefix}" />
        <property name="dist.arc" value="${dist.dir}/${prefix}" />
        <mkdir dir="${tmp.arc.dir}" />
        <copy file="${build.dir}/${jar.name}" tofile="${dist.dir}/${jar.name}" overwrite="true" />
        <copy file="${basedir}/pom_template.xml" tofile="${dist.dir}/${project.name}-${version}.pom" overwrite="true" >
            <filterchain>
                <replacetokens>
                    <token key="VERSION" value="${version}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <copy todir="${tmp.arc.dir}">
            <fileset dir=".">
                <include name="LICENSE.*" />
                <include name="build.*" />
                <exclude name="*.log" />
                <include name="*.jar" />
                <include name="*.html" />
            </fileset>
        </copy>
        <copy todir="${tmp.arc.dir}" file="${build.dir}/${jar.name}"/>

        <copy todir="${tmp.arc.dir}/${src.dir}">
            <fileset dir="${src.dir}" >
                <exclude name="**/CodeTableGenerated.java" />
            </fileset>
        </copy>

        <copy todir="${tmp.arc.dir}/${test.src.dir}">
            <fileset dir="${test.src.dir}" >
            </fileset>
        </copy>

        <copy todir="${tmp.arc.dir}/${lib.dir}">
            <fileset dir="${lib.dir}">
                <exclude name="junit*.jar" />
            </fileset>
        </copy>
        <copy todir="${tmp.arc.dir}/apidoc">
            <fileset dir="${apidoc.dir}" />
        </copy>
        <tar tarfile="${dist.arc}.tar" basedir="${tmp.arc.dir}" />
        <gzip zipfile="${dist.arc}.tar.gz" src="${dist.arc}.tar" />
        <delete file="${dist.arc}.tar" />
        <delete file="${dist.arc}.zip" />
        <zip compress="true" basedir="${tmp.dir}" zipfile="${dist.arc}.zip" />
        <delete dir="${tmp.dir}" />
        <jar jarfile="${dist.dir}/${jar.javadoc.name}">
            <manifest>
                <section name="org/marc4j">
                  <attribute name="Specification-Title" value="marc4j"/>
                  <attribute name="Specification-Version" value="${specversion}"/>
                  <attribute name="Specification-Vendor" value="org.marc4j"/>

                  <attribute name="Implementation-Title" value="marc4j"/>
                  <attribute name="Implementation-Version" value="${version}"/>
                  <attribute name="Implementation-Vendor" value="Team marc4j"/>
                </section>
            </manifest>
            <fileset dir="${apidoc.dir}">
                <include name="**" />
            </fileset>
        </jar>
        <jar jarfile="${dist.dir}/${jar.sources.name}" >
            <manifest>
                <section name="org/marc4j">
                  <attribute name="Specification-Title" value="marc4j"/>
                  <attribute name="Specification-Version" value="${specversion}"/>
                  <attribute name="Specification-Vendor" value="org.marc4j"/>

                  <attribute name="Implementation-Title" value="marc4j"/>
                  <attribute name="Implementation-Version" value="${version}"/>
                  <attribute name="Implementation-Vendor" value="Team marc4j"/>
                </section>
            </manifest>
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
                <exclude name ="**/samples/**" />
            </fileset>
            <fileset dir="${build.generated-src.dir}">
                <include name="**/*.java" />
            </fileset>
        </jar>
        <property name="dist.already.run" value="true" />
    </target>

    <target name="sign" depends="dist,release-ready" if="release.is.ready" unless="is.snapshot" >
        <delete dir="${dist.dir}" includes="*.asc" />
        <echo message="Signing jar files using provided passphrase" />
        <exec executable="gpg" dir="${dist.dir}" searchpath="true" >
            <arg value="--batch" />
            <arg value="-a" />
            <arg value="--pinentry-mode=loopback" />
            <arg value="--passphrase" />
            <arg value="${gpg-passphrase}" />
            <arg value="--detach-sign" />
            <arg value="${jar.name}" />
        </exec>
        <exec executable="gpg" dir="${dist.dir}" searchpath="true" >
            <arg value="--batch" />
            <arg value="-a" />
            <arg value="--pinentry-mode=loopback" />
            <arg value="--passphrase" />
            <arg value="${gpg-passphrase}" />
            <arg value="--detach-sign" />
            <arg value="${jar.sources.name}" />
        </exec>
        <exec executable="gpg" dir="${dist.dir}" searchpath="true" >
            <arg value="--batch" />
            <arg value="-a" />
            <arg value="--pinentry-mode=loopback" />
            <arg value="--passphrase" />
            <arg value="${gpg-passphrase}" />
            <arg value="--detach-sign" />
            <arg value="${jar.javadoc.name}" />
        </exec>
        <exec executable="gpg" dir="${dist.dir}" searchpath="true" >
            <arg value="--batch" />
            <arg value="-a" />
            <arg value="--pinentry-mode=loopback" />
            <arg value="--passphrase" />
            <arg value="${gpg-passphrase}" />
            <arg value="--detach-sign" />
            <arg value="${project.name}-${version}.pom" />
        </exec>
        <available file="${dist.dir}/${jar.name}.asc" property="sign.successful" />
        <fail unless="sign.successful" message="failure signing jar files release to sonatype will fail" />
        <echo message="Creating uploadable bundle bundle-${version}.jar" />
        <jar jarfile="${dist.dir}/bundle-${version}.jar" >
            <fileset dir="${dist.dir}">
                <include name="marc4j*.jar" />
                <include name="marc4j*.pom" />
                <include name="marc4j*.asc" />
            </fileset>
        </jar>
    </target>

    <target name="upload" depends="prepare" if="release.is.ready" unless="is.snapshot" >
        <echo message="Uploading bundle bundle-${version}.jar" />
        <exec executable="curl"  outputproperty="uploadOutput" errorproperty="uploadErrorOutput" >
            <!-- Specify the URL you want to request -->
            <arg value="--user" />
            <arg value="${sonatypeuserpassword}" />
            <!-- form data specify bundle file just created  -->
            <arg value="--request" />
            <arg value="POST" />
            <arg value="--form" />
            <arg value="file=@${dist.dir}/bundle-${version}.jar" />
            <arg value="https://oss.sonatype.org/service/local/staging/bundle_upload" />
        </exec>
        <echo message="bundle uri = ${uploadOutput}" />
        <!-- <echo message="error = ${uploadErrorOutput}" /> -->
        <!-- Use the regexp task to extract the desired value -->
        <propertyregex property="repositoryId" input="${uploadOutput}" regexp=".*repositories/([a-zA-Z0-9-]+).*" select="\1" />
        <fail message="Upload to sonatype didn't succeed: ${line.separator}${uploadErrorOutput}" unless="repositoryId" />
    </target>

    <!-- Macro definition for executing the command -->
    <macrodef name="execute-check-closed">
        <attribute name="returnProperty"/>
        <sequential>
            <local name="commandOutput" />
            <exec executable="curl" outputproperty="commandOutput" failonerror="false">
                <arg value="-s" />
                <arg value="-u" />
                <arg value="${sonatypeuserpassword}" />
                <arg value="-H" />
                <arg value="Content-Type: application/xml" />
                <arg value="-X" />
                <arg value="GET" />
                <arg value="https://oss.sonatype.org/service/local/staging/repository/${repositoryId}" />
            </exec>
            <condition property="@{returnProperty}">
                <contains string="${commandOutput}" substring="&lt;type&gt;closed&lt;/type&gt;" />
            </condition>
        <!--    <echo message="output = ${commandOutput}"/> -->
        </sequential>
    </macrodef>

    <macrodef name="finish-drop-promote">
        <attribute name="command"/>
        <attribute name="message"/>
        <attribute name="verbose" default="-s" />
        <sequential>
            <echo message="@{message}" />
            <local name="commandOutput" />
            <local name="commandErrorOutput" />
            <exec executable="curl"  outputproperty="commandOutput" errorproperty="commandErrorOutput" >
                <arg value="@{verbose}" />
                <arg value="--user" />
                <arg value="${sonatypeuserpassword}" />
                <arg value="--request" />
                <arg value="POST" />
                <arg value="-H" />
                <arg value="Content-Type: application/json"  />
                <arg value="-d" />
                <arg value='{"data": {"stagedRepositoryId": "${repositoryId}", "description": "Automatically Uploaded repository"}}' />
                <arg value="https://oss.sonatype.org/service/local/staging/profiles/${marc4j.org.profileId.sonatype.org}/@{command}" />
            </exec>
            <echo message="@{command} response = ${commandOutput}" />
        </sequential>
    </macrodef>
           
    <target name="close-staging-repo" if="repositoryId" unless="is.snapshot" >
        <finish-drop-promote command="finish" message="Forcing staging repository to close with finish" verbose="--verbose" />
    </target>

    <target name="wait-closed"  if="repositoryId" unless="is.snapshot" >
        <for list="1,2,3,4,5,6,7,8,9,10" param="loop-count" >
            <sequential>
            <if> 
                <not>
                    <isset property="desired.output.met"/>
                </not>
                <then>
                    <echo message="sleeping ..." />
                    <sleep seconds="15" />
                    <echo message="Executing command @{loop-count} time ..." />
                    <execute-check-closed returnProperty="desired.output.met" />
                    <echo if:set="desired.output.met" message="repository ${repositoryId} closed" />
                    <echo unless:set="desired.output.met" message="repository ${repositoryId} not closed yet" />
                </then>
            </if>
            </sequential>
        </for>

        <!-- Check if the condition was met before printing -->
        <fail unless="desired.output.met" message="Sonatype repository not closed after 10 retries." />

        <echo message="Condition met!" />
    </target>

    <target name="promote" depends="close-staging-repo,wait-closed"  if="repositoryId" unless="is.snapshot" >
        <finish-drop-promote command="promote" message="Promoting staging repository ${repositoryId} to close with promote" verbose="--verbose" />
    </target>

    <target name="release-ready" depends="prepare" unless="release.is.ready" >
        <available file="gpg"  filepath="${env.PATH}" property="has-gpg" />
        <available file="curl"  filepath="${env.PATH}" property="has-curl" />
        <if>
            <and>
                <not>
                    <isset property="is.snapshot" />
                </not>
                <isset property="sonatypeuserpassword"   />
                <isset property="gpg-passphrase" />
                <isset property="has-gpg" />
                <isset property="has-curl" />
                <isset property="marc4j.org.profileId.sonatype.org" />
            </and>
            <then>
                <property name="release.is.ready" value="true" />
            </then>
            <else>
                <echo if:set="is.snapshot"                            message="ERROR: current state is snapshot" level="error" />
                <echo unless:set="sonatypeuserpassword"               message="ERROR: sonatype username and password not provided" level="error" />
                <echo if:blank="${sonatypeuserpassword}"              message="ERROR: sonatype username and password is blank" level="error" />
                <echo unless:set="gpg-passphrase"                     message="ERROR: gpg passphrase not provided" level="error" />
                <echo if:blank="${gpg-passphrase}"                    message="ERROR: gpg passphrase is blank" level="error" />
                <echo unless:set="has-gpg"                            message="ERROR: program gpg not found in PATH" level="error" />
                <echo unless:set="has-curl"                           message="ERROR: program curl not found in PATH" level="error" />
                <echo unless:set="marc4j.org.profileId.sonatype.org"  message="ERROR: sonatype profileId not provided" level="error" />
                <echo if:blank="${marc4j.org.profileId.sonatype.org}" message="ERROR: sonatype profileId is blank" level="error" />

                <fail message="required values for a sonatype release not all defined" />
            </else>
        </if>
    
    </target> 

    <target name="sonatype-release" depends="sign,upload,promote" if="release.is.ready" >
        <echo message="Checking for successful release of bundle-${version}.jar from ${repositoryId} " />
        <exec executable="curl"  outputproperty="releaseOutput" errorproperty="releaseErrorOutput" >
            <!-- Specify the URL you want to request -->
            <arg value="--user" />
            <arg value="${sonatypeuserpassword}" />
            <arg value="https://oss.sonatype.org/service/local/lucene/search?g=org.marc4j&amp;a=marc4j.jar&amp;v=${version}" />
        </exec>
        <condition property="release.success">
            <contains string="${releasedOutput}" substring="&lt;totalCount&gt;1&lt;/totalCount&gt;" />
        </condition>
        <fail message="Release to sonatype didn't succeed: ${line.separator}${releaseErrorOutput}" unless="release.success" />
        <echo message="Release response = ${releaseOutput}" />

    </target>


    <property name="ivy.install.version" value="2.5.0" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="check-download" >
        <available file="${ivy.jar.file}" property="skip.download"/>
    </target>

    <target name="download-ivy" depends="check-download" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>

        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="setup-ivy" depends="download-ivy" description="--> setup ivy" unless="prepared">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <target name="-version1" unless="version" >
        <mkdir dir="${dist.dir}/tmp" />
        <get src="https://api.github.com/repos/marc4j/marc4j/releases/latest" dest="${dist.dir}/tmp/git.release.txt" />
        <loadfile srcfile="${dist.dir}/tmp/git.release.txt" property="versionstr" >
            <filterchain>
                <tokenfilter>
                    <replacestring from="," to=",${line.separator}" />
                </tokenfilter>
                <linecontains>
                   <contains value="tag_name"/>
                </linecontains>
                <tokenfilter>
                     <replaceregex pattern=".*&quot;tag_name&quot;:[ ]*&quot;([0-9.]*).*" replace="\1" />
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <loadresource property="specversion">
          <propertyresource name="versionstr"/>
          <filterchain>
            <tokenfilter>
              <filetokenizer/>
              <replaceregex pattern="[.][0-9]*$" replace=""/>
            </tokenfilter>
          </filterchain>
        </loadresource>
        <echo message="specversion = ${specversion}" />
        <echo message="versionstr = ${versionstr}" />
    </target>

    <target name="-version2" unless="version" >
        <get src="https://api.github.com/repos/marc4j/marc4j/compare/${versionstr}...master" dest="${dist.dir}/tmp/git.commits.txt" />
        <loadfile srcfile="${dist.dir}/tmp/git.commits.txt" property="versionsuffix" >
            <filterchain>
                <tokenfilter>
                    <replacestring from="," to=", ${line.separator}" />
                </tokenfilter>
                <linecontains>
                   <contains value="total_commits"/>
                </linecontains>
                <striplinebreaks/>
                <tokenfilter>
                    <replaceregex pattern=".*&quot;total_commits&quot;:[ ]*([1-9][0-9]*).*" replace="-\1-SNAPSHOT" />
                    <replaceregex pattern=".*&quot;total_commits&quot;:[ ]*(0).*" replace="" />
                </tokenfilter>
            </filterchain>
        </loadfile>
        <echo message="versionsuffix = ${versionsuffix}" />
        <property name="versionsuffix" value="" />
        <echo message="versionsuffix = ${versionsuffix}" />
     <!--    <delete dir="${dist.dir}/tmp" /> -->
    </target>

    <available file=".git" type="dir" property="git.present"/>

    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present" unless="version">
        <property environment="env"/>
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="git.not.found">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--dirty=-SNAPSHOT"/>
            <arg value="--always"/>
        </exec>
        <exec executable="git" outputproperty="git.major.revision" failifexecutionfails="false" errorproperty="git.not.found">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--abbrev=0"/>
        </exec>
        <condition property="version" value="${git.revision}">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
        <condition property="versionstr" value="${git.major.revision}">
            <and>
                <isset property="git.major.revision"/>
                <length string="${git.major.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
    </target>

    <target name="version" depends="git.revision,-version1,-version2" description="Get the version number to use from github" >
        <echo message="git.revision = ${git.revision}" />

        <property name="version" value="${versionstr}${versionsuffix}" />
        <echo message="version = ${version}" />
        <condition property="is.snapshot">
            <contains string="${version}" substring="SNAPSHOT" />
        </condition>
        <echo message="is.snapshot = ${is.snapshot}" />
        <property name="jar.name" value="${project.name}-${version}.jar" />
        <property name="jar.sources.name" value="${project.name}-${version}-sources.jar" />
        <property name="jar.javadoc.name" value="${project.name}-${version}-javadoc.jar" />
        <property name="test.jar.name" value="${project.name}_test-${version}.jar" />
    </target>


</project>
